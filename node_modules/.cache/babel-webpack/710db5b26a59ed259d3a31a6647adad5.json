{"ast":null,"code":"/**-----------------------------------------------------------------------------------------\n* Copyright © 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as i0 from '@angular/core';\nimport { EventEmitter, LOCALE_ID, Injectable, Inject, Pipe, NgModule } from '@angular/core';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport * as intl from '@progress/kendo-intl';\n/**\n * @hidden\n */\n\nconst packageMetadata = {\n  name: '@progress/kendo-angular-intl',\n  productName: 'Kendo UI for Angular',\n  productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],\n  publishDate: 1668698299,\n  version: '',\n  licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/?utm_medium=product&utm_source=kendoangular&utm_campaign=kendo-ui-angular-purchase-license-keys-warning'\n};\nconst DOCS_URL = 'http://www.telerik.com/kendo-angular-ui/components/internationalization/troubleshooting/';\n/**\n * @hidden\n */\n\nconst errorSolutions = {\n  'NoCurrency': `Solution: ${DOCS_URL}#toc-no-currency`,\n  'NoCurrencyDisplay': `Solution: ${DOCS_URL}#toc-no-currency-display`,\n  'NoCurrencyRegion': `Solution: ${DOCS_URL}#toc-no-currency-region`,\n  'NoDateFieldNames': `Solution: ${DOCS_URL}#toc-no-date-filed-names`,\n  'NoFirstDay': `Solution: ${DOCS_URL}#toc-no-first-day`,\n  'NoGMTInfo': `Solution: ${DOCS_URL}#toc-no-gmt-info`,\n  'NoLocale': `Solution: ${DOCS_URL}#toc-no-locale`,\n  'NoValidCurrency': `Solution: ${DOCS_URL}#toc-no-valid-currency`,\n  'NoWeekData': `Solution: ${DOCS_URL}#toc-no-week-data`\n};\n\nfunction formatMessage(error) {\n  const message = error.message;\n  const errorSolution = errorSolutions[Object.keys(errorSolutions).filter(key => message.indexOf(key) === 0)[0]];\n  return errorSolution ? `${message} ${errorSolution}` : message;\n}\n\nfunction intlMethod(fn) {\n  return function (...values) {\n    try {\n      return fn.apply(null, values);\n    } catch (error) {\n      error.message = formatMessage(error);\n      throw error;\n    }\n  };\n}\n/**\n * @hidden\n */\n\n\nconst dateFormatNames = intlMethod(intl.dateFormatNames);\n/**\n * @hidden\n */\n\nconst dateFieldName = intlMethod(intl.dateFieldName);\n/**\n * @hidden\n */\n\nconst firstDay = intlMethod(intl.firstDay);\n/**\n * @hidden\n */\n\nconst format = intlMethod(intl.format);\n/**\n * @hidden\n */\n\nconst formatDate = intlMethod(intl.formatDate);\n/**\n * @hidden\n */\n\nconst formatNumber = intlMethod(intl.formatNumber);\n/**\n * @hidden\n */\n\nconst load = intlMethod(intl.load);\n/**\n * @hidden\n */\n\nconst numberSymbols = intlMethod(intl.numberSymbols);\n/**\n * @hidden\n */\n\nconst parseDate = intlMethod(intl.parseDate);\n/**\n * @hidden\n */\n\nconst parseNumber = intlMethod(intl.parseNumber);\n/**\n * @hidden\n */\n\nconst splitDateFormat = intlMethod(intl.splitDateFormat);\n/**\n * @hidden\n */\n\nconst toString = intlMethod(intl.toString);\n/**\n * @hidden\n */\n\nconst weekendRange = intlMethod(intl.weekendRange);\n/**\n * Sets a pre-built locale.\n *\n * @params data - The pre-built locale data.\n */\n\nconst setData = data => intl.setData(data);\n/**\n * Retrieves the locale data for the specified locale.\n *\n * @params locale - The locale id.\n * @returns data - The locale data.\n */\n\n\nconst localeData = locale => {\n  try {\n    return intl.localeInfo(locale);\n  } catch (error) {\n    error.message = formatMessage(error);\n    throw error;\n  }\n};\n\nconst LOCALE_REGEX = /_/g;\n/**\n * @hidden\n */\n\nfunction cldrServiceFactory(localeId) {\n  return new CldrIntlService(localeId);\n}\n/**\n * An abstract base class that implements\n * the Internationalization service methods\n * for the current locale.\n */\n\n\nclass IntlService {\n  /**\n   * @hidden\n   */\n  constructor() {\n    /**\n     * @hidden\n     */\n    this.changes = new EventEmitter();\n    validatePackage(packageMetadata);\n  }\n  /**\n   * Notifies that the service was changed.\n   */\n\n\n  notify() {\n    this.changes.emit();\n  }\n\n}\n\nIntlService.ɵfac = function IntlService_Factory(t) {\n  return new (t || IntlService)();\n};\n\nIntlService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: IntlService,\n  factory: function IntlService_Factory(t) {\n    let r = null;\n\n    if (t) {\n      r = new t();\n    } else {\n      r = cldrServiceFactory(i0.ɵɵinject(LOCALE_ID));\n    }\n\n    return r;\n  },\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IntlService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useFactory: cldrServiceFactory,\n      deps: [LOCALE_ID]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * The Internationalization service implemented by using\n * the CLDR Database via the `@progress/kendo-intl` package.\n */\n\n\nclass CldrIntlService extends IntlService {\n  /**\n   * Creates a new instance of the service with the ID of the specified locale.\n   *\n   * Note that the parts of the locale ID can be separated by either `_` (underscore)\n   * or `-` (dash).\n   *\n   * @param localeId - The default locale ID.\n   */\n  constructor(localeId) {\n    super();\n    this.localeId = localeId;\n  }\n  /**\n   * Gets or sets the current locale ID.\n   */\n\n\n  get localeId() {\n    return this.locale;\n  }\n\n  set localeId(value) {\n    // Angular locales use underscore, for example, en_US\n    // while IETF BCP-47 specifies a dash.\n    // https://tools.ietf.org/html/bcp47\n    const locale = value.replace(LOCALE_REGEX, '-');\n\n    if (locale !== this.locale) {\n      this.locale = locale;\n      this.notify();\n    }\n  }\n  /**\n   * Formats a string with placeholders such as\n   * `Total amount {0:c}`.\n   *\n   * @param format - The format string.\n   * @param values - One or more values to output in the format string placeholders.\n   * @return - The formatted string.\n   */\n\n\n  format(format$1, ...values) {\n    return format(format$1, values, this.localeId);\n  }\n  /**\n   * Converts an object into a string based on the specified format.\n   *\n   * @param value - The value to format.\n   * @param format - The format to use.\n   * @param localeId - The locale ID to use in place of the default one. Optional.\n   * @return The formatted object.\n   */\n\n\n  toString(value, format, localeId) {\n    return toString(value, format, localeId || this.localeId);\n  }\n  /**\n   * Converts a `Date` object into a string based on the specified format.\n   * If no format is provided, the default short date format is used.\n   *\n   * @param value - The date to format.\n   * @param format - The format string or options.\n   * @param localeId - The locale ID to use in place of the default one. Optional.\n   * @return The formatted date.\n   */\n\n\n  formatDate(value, format, localeId) {\n    return formatDate(value, format, localeId || this.localeId);\n  }\n  /**\n   * Converts a string into a `Date` object based on the specified format.\n   *\n   * @param value - The string to convert.\n   * @param format - The format strings or options.\n   * @param localeId - The locale ID to use in place of the default one. Optional.\n   * @return The parsed date.\n   */\n\n\n  parseDate(value, format, localeId) {\n    return parseDate(value, format, localeId || this.localeId);\n  }\n  /**\n   * Converts a string into a `Number`.\n   *\n   * @param value - The string to convert.\n   * @param format - The format string or options.\n   * @param localeId - The locale ID to use in place of the default one. Optional.\n   * @return The parsed number.\n   */\n\n\n  parseNumber(value, format, localeId) {\n    return parseNumber(value, localeId || this.localeId, format);\n  }\n  /**\n   * Converts a `Number` into a string based on the specified format.\n   *\n   * @param value - The number to format.\n   * @param format - The format string or options.\n   * @param localeId - The locale ID to use in place of the default one. Optional.\n   * @return The formatted number.\n   */\n\n\n  formatNumber(value, format, localeId) {\n    return formatNumber(value, format, localeId || this.localeId);\n  }\n  /**\n   * Returns the date names from the current locale based on the option.\n   *\n   * The available `type` values are:\n   * - `era`\n   * - `year`\n   * - `quarter`\n   * - `month`\n   * - `week`\n   * - `day`\n   * - `dayperiod`\n   * - `hour`\n   * - `minute`\n   * - `second`\n   * - `zone`\n   *\n   * The available `nameType` values are:\n   * - `wide`\n   * - `narrow`\n   * - `short`\n   *\n   * @param options - Detailed configuration for the desired date field name.\n   * @param localeId - The locale ID to use in place of the default one. Optional.\n   * @return - The day names from the current locale based on the option.\n   * @returns The localized date field name from the current locale based on the option.\n   *\n   * @example\n   * ```\n   * dateFieldName({ type: 'day' });                      //returns 'day';\n   * dateFieldName({ type: 'day', nameType: 'wide' });    //returns 'day';\n   * dateFieldName({ type: 'month', nameType: 'short' }); //returns 'mo.';\n   * dateFieldName({ type: 'month', nameType: 'wide' });  //returns 'month';\n   * ```\n   */\n\n\n  dateFieldName(options, localeId) {\n    return dateFieldName(options, localeId || this.localeId);\n  }\n  /**\n   * Returns a localized date field name based on specific dateFieldName options.\n   *\n   * The available type values are:\n   * - `day`\n   * - `dayperiod`\n   * - `months`\n   * - `quarters`\n   * - `eras`\n   *\n   * @param options - Detailed configuration for the desired date format.\n   * @param localeId - The locale ID to use in place of the default one. Optional.\n   * @return - The day names from the current locale based on the option.\n   */\n\n\n  dateFormatNames(options, localeId) {\n    return dateFormatNames(localeId || this.localeId, options);\n  }\n  /**\n   * Splits the date format into objects containing information about each part of the pattern.\n   *\n   * @param format The format string or options.\n   * @param localeId The optional locale id. If not specified, the `\"en\"` locale id is used.\n   * @returns The date format parts.\n   */\n\n\n  splitDateFormat(format, localeId) {\n    return splitDateFormat(format, localeId || this.localeId);\n  }\n  /**\n   * Returns the number symbols from the current locale based on the option.\n   *\n   * @param localeId - The locale ID to use in place of the default one. Optional.\n   * @return - The number symbols from the current locale.\n   */\n\n\n  numberSymbols(localeId) {\n    return numberSymbols(localeId || this.localeId);\n  }\n  /**\n   * Returns the first day index starting from Sunday.\n   *\n   * @param localeId - The locale ID. Defaults to the current locale ID.\n   * @return - The index of the first day of the week (0 == Sunday).\n   */\n\n\n  firstDay(localeId) {\n    return firstDay(localeId || this.localeId);\n  }\n  /**\n   * Returns the start and end index of the locale weekend starting from Sunday.\n   *\n   * @param localeId - The locale ID. Defaults to the current locale ID.\n   * @return - The the start and end index of the locale weekend (0 == Sunday).\n   */\n\n\n  weekendRange(localeId) {\n    return weekendRange(localeId || this.localeId);\n  }\n\n}\n\nCldrIntlService.ɵfac = function CldrIntlService_Factory(t) {\n  return new (t || CldrIntlService)(i0.ɵɵinject(LOCALE_ID));\n};\n\nCldrIntlService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CldrIntlService,\n  factory: CldrIntlService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CldrIntlService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }];\n  }, null);\n})();\n\nconst isNumeric = value => !isNaN(value - parseFloat(value));\n/**\n * Formats a date value to a string based on the requested format.\n * This pipe uses the [IntlService]({% slug api_intl_intlservice %}).\n *\n * @example\n * ```ng-template-no-run\n * <ul>\n *    <li>{{date | kendoDate }}</li>\n *    <li>{{milliseconds | kendoDate: 'M/dd/yyy' }}</li>\n *    <li>{{stringDate | kendoDate: 'G' }}</li>\n * </ul>\n * ```\n */\n\n\nclass DatePipe {\n  /**\n   * @hidden\n   */\n  constructor(intlService) {\n    this.intlService = intlService;\n  }\n  /**\n   * Converts a `Date` object into a string based on the specified format.\n   * If no format is provided, the default short date format is used.\n   *\n   * @param value - The date to format.\n   * @param format - The format string or options.\n   * @param localeId - (Optional) The ID of the locale which will be used instead of the default one.\n   * @return - The formatted date.\n   */\n\n\n  transform(value, format = \"\", localeId) {\n    value = this.normalize(value);\n\n    if (value) {\n      return this.intlService.formatDate(value, format, localeId);\n    }\n\n    return value;\n  }\n\n  normalize(value) {\n    if (value && typeof value === 'string') {\n      value = this.intlService.parseDate(value);\n    } else if (value && isNumeric(value)) {\n      value = new Date(parseFloat(value));\n    }\n\n    return value;\n  }\n\n}\n\nDatePipe.ɵfac = function DatePipe_Factory(t) {\n  return new (t || DatePipe)(i0.ɵɵdirectiveInject(IntlService, 16));\n};\n\nDatePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"kendoDate\",\n  type: DatePipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DatePipe, [{\n    type: Pipe,\n    args: [{\n      name: 'kendoDate'\n    }]\n  }], function () {\n    return [{\n      type: IntlService\n    }];\n  }, null);\n})();\n/**\n * Formats a number value to a string based on the requested format.\n * This pipe uses the [`IntlService`]({% slug api_intl_intlservice %}).\n *\n * @example\n * ```ng-template-no-run\n *   <ul>\n *     <li>{{decimal | kendoNumber:'c' }}</li>\n *     <li>{{stringNumber | kendoNumber:'p' }}</li>\n *     <li>{{int | kendoNumber:'##.00' }}</li>\n *  </ul>\n * ```\n */\n\n\nclass NumberPipe {\n  /**\n   * @hidden\n   */\n  constructor(intlService) {\n    this.intlService = intlService;\n  }\n  /**\n   * Converts a `Number` object into a string based on the specified format.\n   * If no format is provided, the value is formatted as decimal number using the\n   * [`\"n\"`](https://github.com/telerik/kendo-intl/blob/master/docs/num-formatting/index.md#standard) format.\n   *\n   * @param value - The numer that will be formatted.\n   * @param format - The format string or options.\n   * @param localeId - (Optional) The locale ID that will be used in place of the default one.\n   * @return - The formatted number.\n   */\n\n\n  transform(value, format, localeId) {\n    if (typeof value === 'string') {\n      value = this.intlService.parseNumber(value);\n    }\n\n    if (value !== null && value !== undefined) {\n      return this.intlService.formatNumber(value, format, localeId);\n    }\n\n    return value;\n  }\n\n}\n\nNumberPipe.ɵfac = function NumberPipe_Factory(t) {\n  return new (t || NumberPipe)(i0.ɵɵdirectiveInject(IntlService, 16));\n};\n\nNumberPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"kendoNumber\",\n  type: NumberPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NumberPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'kendoNumber'\n    }]\n  }], function () {\n    return [{\n      type: IntlService\n    }];\n  }, null);\n})();\n\nconst pipes = [DatePipe, NumberPipe];\n/**\n * Represents the [NgModule](link:site.data.urls.angular['ngmoduleapi']docs/ts/latest/guide/ngmodule.html)\n * definition for the Intl services.\n */\n\nclass IntlModule {}\n\nIntlModule.ɵfac = function IntlModule_Factory(t) {\n  return new (t || IntlModule)();\n};\n\nIntlModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: IntlModule\n});\nIntlModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IntlModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [pipes],\n      exports: [pipes]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CldrIntlService, DatePipe, IntlModule, IntlService, NumberPipe, cldrServiceFactory, dateFieldName, dateFormatNames, firstDay, format, formatDate, formatNumber, load, localeData, numberSymbols, parseDate, parseNumber, setData, splitDateFormat, toString, weekendRange };","map":{"version":3,"sources":["C:/Repos/angular-kendo-grid/node_modules/@progress/kendo-angular-intl/fesm2015/kendo-angular-intl.js"],"names":["i0","EventEmitter","LOCALE_ID","Injectable","Inject","Pipe","NgModule","validatePackage","intl","packageMetadata","name","productName","productCodes","publishDate","version","licensingDocsUrl","DOCS_URL","errorSolutions","formatMessage","error","message","errorSolution","Object","keys","filter","key","indexOf","intlMethod","fn","values","apply","dateFormatNames","dateFieldName","firstDay","format","formatDate","formatNumber","load","numberSymbols","parseDate","parseNumber","splitDateFormat","toString","weekendRange","setData","data","localeData","locale","localeInfo","LOCALE_REGEX","cldrServiceFactory","localeId","CldrIntlService","IntlService","constructor","changes","notify","emit","ɵfac","ɵprov","type","args","providedIn","useFactory","deps","value","replace","format$1","options","undefined","decorators","isNumeric","isNaN","parseFloat","DatePipe","intlService","transform","normalize","Date","ɵpipe","NumberPipe","pipes","IntlModule","ɵmod","ɵinj","declarations","exports"],"mappings":"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","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright © 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as i0 from '@angular/core';\nimport { EventEmitter, LOCALE_ID, Injectable, Inject, Pipe, NgModule } from '@angular/core';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport * as intl from '@progress/kendo-intl';\n\n/**\n * @hidden\n */\nconst packageMetadata = {\n    name: '@progress/kendo-angular-intl',\n    productName: 'Kendo UI for Angular',\n    productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],\n    publishDate: 1668698299,\n    version: '',\n    licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/?utm_medium=product&utm_source=kendoangular&utm_campaign=kendo-ui-angular-purchase-license-keys-warning'\n};\n\nconst DOCS_URL = 'http://www.telerik.com/kendo-angular-ui/components/internationalization/troubleshooting/';\n/**\n * @hidden\n */\nconst errorSolutions = {\n    'NoCurrency': `Solution: ${DOCS_URL}#toc-no-currency`,\n    'NoCurrencyDisplay': `Solution: ${DOCS_URL}#toc-no-currency-display`,\n    'NoCurrencyRegion': `Solution: ${DOCS_URL}#toc-no-currency-region`,\n    'NoDateFieldNames': `Solution: ${DOCS_URL}#toc-no-date-filed-names`,\n    'NoFirstDay': `Solution: ${DOCS_URL}#toc-no-first-day`,\n    'NoGMTInfo': `Solution: ${DOCS_URL}#toc-no-gmt-info`,\n    'NoLocale': `Solution: ${DOCS_URL}#toc-no-locale`,\n    'NoValidCurrency': `Solution: ${DOCS_URL}#toc-no-valid-currency`,\n    'NoWeekData': `Solution: ${DOCS_URL}#toc-no-week-data`\n};\n\nfunction formatMessage(error) {\n    const message = error.message;\n    const errorSolution = errorSolutions[Object.keys(errorSolutions).filter(key => message.indexOf(key) === 0)[0]];\n    return errorSolution ? `${message} ${errorSolution}` : message;\n}\nfunction intlMethod(fn) {\n    return function (...values) {\n        try {\n            return fn.apply(null, values);\n        }\n        catch (error) {\n            error.message = formatMessage(error);\n            throw error;\n        }\n    };\n}\n/**\n * @hidden\n */\nconst dateFormatNames = intlMethod(intl.dateFormatNames);\n/**\n * @hidden\n */\nconst dateFieldName = intlMethod(intl.dateFieldName);\n/**\n * @hidden\n */\nconst firstDay = intlMethod(intl.firstDay);\n/**\n * @hidden\n */\nconst format = intlMethod(intl.format);\n/**\n * @hidden\n */\nconst formatDate = intlMethod(intl.formatDate);\n/**\n * @hidden\n */\nconst formatNumber = intlMethod(intl.formatNumber);\n/**\n * @hidden\n */\nconst load = intlMethod(intl.load);\n/**\n * @hidden\n */\nconst numberSymbols = intlMethod(intl.numberSymbols);\n/**\n * @hidden\n */\nconst parseDate = intlMethod(intl.parseDate);\n/**\n * @hidden\n */\nconst parseNumber = intlMethod(intl.parseNumber);\n/**\n * @hidden\n */\nconst splitDateFormat = intlMethod(intl.splitDateFormat);\n/**\n * @hidden\n */\nconst toString = intlMethod(intl.toString);\n/**\n * @hidden\n */\nconst weekendRange = intlMethod(intl.weekendRange);\n/**\n * Sets a pre-built locale.\n *\n * @params data - The pre-built locale data.\n */\nconst setData = (data) => intl.setData(data);\n/**\n * Retrieves the locale data for the specified locale.\n *\n * @params locale - The locale id.\n * @returns data - The locale data.\n */\nconst localeData = (locale) => {\n    try {\n        return intl.localeInfo(locale);\n    }\n    catch (error) {\n        error.message = formatMessage(error);\n        throw error;\n    }\n};\n\nconst LOCALE_REGEX = /_/g;\n/**\n * @hidden\n */\nfunction cldrServiceFactory(localeId) {\n    return new CldrIntlService(localeId);\n}\n/**\n * An abstract base class that implements\n * the Internationalization service methods\n * for the current locale.\n */\nclass IntlService {\n    /**\n     * @hidden\n     */\n    constructor() {\n        /**\n         * @hidden\n         */\n        this.changes = new EventEmitter();\n        validatePackage(packageMetadata);\n    }\n    /**\n     * Notifies that the service was changed.\n     */\n    notify() {\n        this.changes.emit();\n    }\n}\nIntlService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: IntlService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nIntlService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: IntlService, providedIn: 'root', useFactory: cldrServiceFactory, deps: [{ token: LOCALE_ID }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: IntlService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                    useFactory: cldrServiceFactory,\n                    deps: [LOCALE_ID]\n                }]\n        }], ctorParameters: function () { return []; } });\n/**\n * The Internationalization service implemented by using\n * the CLDR Database via the `@progress/kendo-intl` package.\n */\nclass CldrIntlService extends IntlService {\n    /**\n     * Creates a new instance of the service with the ID of the specified locale.\n     *\n     * Note that the parts of the locale ID can be separated by either `_` (underscore)\n     * or `-` (dash).\n     *\n     * @param localeId - The default locale ID.\n     */\n    constructor(localeId) {\n        super();\n        this.localeId = localeId;\n    }\n    /**\n     * Gets or sets the current locale ID.\n     */\n    get localeId() {\n        return this.locale;\n    }\n    set localeId(value) {\n        // Angular locales use underscore, for example, en_US\n        // while IETF BCP-47 specifies a dash.\n        // https://tools.ietf.org/html/bcp47\n        const locale = value.replace(LOCALE_REGEX, '-');\n        if (locale !== this.locale) {\n            this.locale = locale;\n            this.notify();\n        }\n    }\n    /**\n     * Formats a string with placeholders such as\n     * `Total amount {0:c}`.\n     *\n     * @param format - The format string.\n     * @param values - One or more values to output in the format string placeholders.\n     * @return - The formatted string.\n     */\n    format(format$1, ...values) {\n        return format(format$1, values, this.localeId);\n    }\n    /**\n     * Converts an object into a string based on the specified format.\n     *\n     * @param value - The value to format.\n     * @param format - The format to use.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted object.\n     */\n    toString(value, format, localeId) {\n        return toString(value, format, localeId || this.localeId);\n    }\n    /**\n     * Converts a `Date` object into a string based on the specified format.\n     * If no format is provided, the default short date format is used.\n     *\n     * @param value - The date to format.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted date.\n     */\n    formatDate(value, format, localeId) {\n        return formatDate(value, format, localeId || this.localeId);\n    }\n    /**\n     * Converts a string into a `Date` object based on the specified format.\n     *\n     * @param value - The string to convert.\n     * @param format - The format strings or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The parsed date.\n     */\n    parseDate(value, format, localeId) {\n        return parseDate(value, format, localeId || this.localeId);\n    }\n    /**\n     * Converts a string into a `Number`.\n     *\n     * @param value - The string to convert.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The parsed number.\n     */\n    parseNumber(value, format, localeId) {\n        return parseNumber(value, localeId || this.localeId, format);\n    }\n    /**\n     * Converts a `Number` into a string based on the specified format.\n     *\n     * @param value - The number to format.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted number.\n     */\n    formatNumber(value, format, localeId) {\n        return formatNumber(value, format, localeId || this.localeId);\n    }\n    /**\n     * Returns the date names from the current locale based on the option.\n     *\n     * The available `type` values are:\n     * - `era`\n     * - `year`\n     * - `quarter`\n     * - `month`\n     * - `week`\n     * - `day`\n     * - `dayperiod`\n     * - `hour`\n     * - `minute`\n     * - `second`\n     * - `zone`\n     *\n     * The available `nameType` values are:\n     * - `wide`\n     * - `narrow`\n     * - `short`\n     *\n     * @param options - Detailed configuration for the desired date field name.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The day names from the current locale based on the option.\n     * @returns The localized date field name from the current locale based on the option.\n     *\n     * @example\n     * ```\n     * dateFieldName({ type: 'day' });                      //returns 'day';\n     * dateFieldName({ type: 'day', nameType: 'wide' });    //returns 'day';\n     * dateFieldName({ type: 'month', nameType: 'short' }); //returns 'mo.';\n     * dateFieldName({ type: 'month', nameType: 'wide' });  //returns 'month';\n     * ```\n     */\n    dateFieldName(options, localeId) {\n        return dateFieldName(options, localeId || this.localeId);\n    }\n    /**\n     * Returns a localized date field name based on specific dateFieldName options.\n     *\n     * The available type values are:\n     * - `day`\n     * - `dayperiod`\n     * - `months`\n     * - `quarters`\n     * - `eras`\n     *\n     * @param options - Detailed configuration for the desired date format.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The day names from the current locale based on the option.\n     */\n    dateFormatNames(options, localeId) {\n        return dateFormatNames(localeId || this.localeId, options);\n    }\n    /**\n     * Splits the date format into objects containing information about each part of the pattern.\n     *\n     * @param format The format string or options.\n     * @param localeId The optional locale id. If not specified, the `\"en\"` locale id is used.\n     * @returns The date format parts.\n     */\n    splitDateFormat(format, localeId) {\n        return splitDateFormat(format, localeId || this.localeId);\n    }\n    /**\n     * Returns the number symbols from the current locale based on the option.\n     *\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The number symbols from the current locale.\n     */\n    numberSymbols(localeId) {\n        return numberSymbols(localeId || this.localeId);\n    }\n    /**\n     * Returns the first day index starting from Sunday.\n     *\n     * @param localeId - The locale ID. Defaults to the current locale ID.\n     * @return - The index of the first day of the week (0 == Sunday).\n     */\n    firstDay(localeId) {\n        return firstDay(localeId || this.localeId);\n    }\n    /**\n     * Returns the start and end index of the locale weekend starting from Sunday.\n     *\n     * @param localeId - The locale ID. Defaults to the current locale ID.\n     * @return - The the start and end index of the locale weekend (0 == Sunday).\n     */\n    weekendRange(localeId) {\n        return weekendRange(localeId || this.localeId);\n    }\n}\nCldrIntlService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CldrIntlService, deps: [{ token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Injectable });\nCldrIntlService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CldrIntlService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: CldrIntlService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LOCALE_ID]\n                }] }]; } });\n\nconst isNumeric = (value) => !isNaN(value - parseFloat(value));\n/**\n * Formats a date value to a string based on the requested format.\n * This pipe uses the [IntlService]({% slug api_intl_intlservice %}).\n *\n * @example\n * ```ng-template-no-run\n * <ul>\n *    <li>{{date | kendoDate }}</li>\n *    <li>{{milliseconds | kendoDate: 'M/dd/yyy' }}</li>\n *    <li>{{stringDate | kendoDate: 'G' }}</li>\n * </ul>\n * ```\n */\nclass DatePipe {\n    /**\n     * @hidden\n     */\n    constructor(intlService) {\n        this.intlService = intlService;\n    }\n    /**\n     * Converts a `Date` object into a string based on the specified format.\n     * If no format is provided, the default short date format is used.\n     *\n     * @param value - The date to format.\n     * @param format - The format string or options.\n     * @param localeId - (Optional) The ID of the locale which will be used instead of the default one.\n     * @return - The formatted date.\n     */\n    transform(value, format = \"\", localeId) {\n        value = this.normalize(value);\n        if (value) {\n            return this.intlService.formatDate(value, format, localeId);\n        }\n        return value;\n    }\n    normalize(value) {\n        if (value && typeof value === 'string') {\n            value = this.intlService.parseDate(value);\n        }\n        else if (value && isNumeric(value)) {\n            value = new Date(parseFloat(value));\n        }\n        return value;\n    }\n}\nDatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: DatePipe, deps: [{ token: IntlService }], target: i0.ɵɵFactoryTarget.Pipe });\nDatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: DatePipe, name: \"kendoDate\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: DatePipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'kendoDate'\n                }]\n        }], ctorParameters: function () { return [{ type: IntlService }]; } });\n\n/**\n * Formats a number value to a string based on the requested format.\n * This pipe uses the [`IntlService`]({% slug api_intl_intlservice %}).\n *\n * @example\n * ```ng-template-no-run\n *   <ul>\n *     <li>{{decimal | kendoNumber:'c' }}</li>\n *     <li>{{stringNumber | kendoNumber:'p' }}</li>\n *     <li>{{int | kendoNumber:'##.00' }}</li>\n *  </ul>\n * ```\n */\nclass NumberPipe {\n    /**\n     * @hidden\n     */\n    constructor(intlService) {\n        this.intlService = intlService;\n    }\n    /**\n     * Converts a `Number` object into a string based on the specified format.\n     * If no format is provided, the value is formatted as decimal number using the\n     * [`\"n\"`](https://github.com/telerik/kendo-intl/blob/master/docs/num-formatting/index.md#standard) format.\n     *\n     * @param value - The numer that will be formatted.\n     * @param format - The format string or options.\n     * @param localeId - (Optional) The locale ID that will be used in place of the default one.\n     * @return - The formatted number.\n     */\n    transform(value, format, localeId) {\n        if (typeof value === 'string') {\n            value = this.intlService.parseNumber(value);\n        }\n        if (value !== null && value !== undefined) {\n            return this.intlService.formatNumber(value, format, localeId);\n        }\n        return value;\n    }\n}\nNumberPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NumberPipe, deps: [{ token: IntlService }], target: i0.ɵɵFactoryTarget.Pipe });\nNumberPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NumberPipe, name: \"kendoNumber\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NumberPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'kendoNumber'\n                }]\n        }], ctorParameters: function () { return [{ type: IntlService }]; } });\n\nconst pipes = [\n    DatePipe,\n    NumberPipe\n];\n/**\n * Represents the [NgModule](link:site.data.urls.angular['ngmoduleapi']docs/ts/latest/guide/ngmodule.html)\n * definition for the Intl services.\n */\nclass IntlModule {\n}\nIntlModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: IntlModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nIntlModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: IntlModule, declarations: [DatePipe,\n        NumberPipe], exports: [DatePipe,\n        NumberPipe] });\nIntlModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: IntlModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: IntlModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [pipes],\n                    exports: [pipes]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CldrIntlService, DatePipe, IntlModule, IntlService, NumberPipe, cldrServiceFactory, dateFieldName, dateFormatNames, firstDay, format, formatDate, formatNumber, load, localeData, numberSymbols, parseDate, parseNumber, setData, splitDateFormat, toString, weekendRange };\n\n"]},"metadata":{},"sourceType":"module"}